{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Build AI Agents That Actually Work.","text":"<p>A friendly, powerful framework for creating and connecting AI agents. Stop wrestling with the plumbing and start building awesome stuff.</p> Get Started in 5 Mins View on GitHub"},{"location":"#what-is-genai-agentic","title":"What is GenAI Agentic?","text":"<p>Ever felt like building AI agents should be easier? We did too.</p> <p>GenAI Agentic is the infrastructure layer you've been missing. It's a set of tools and protocols designed to make building, deploying, and managing AI agents incredibly simple. Think of it as the operating system for your future agent workforce.</p> <p>We handle the boring stuff\u2014like making sure agents can talk to each other reliably\u2014so you can focus on what matters: bringing your creative ideas to life.</p> <ul> <li>Model-Agnostic: Use GPT or your own local models. We don't play favorites.</li> <li>Simple &amp; Pythonic: If you know Python, you'll feel right at home. Our API is designed to be intuitive and clean.</li> <li>Built for Collaboration: Our Agent-to-Agent (A2A) protocol makes creating multi-agent systems a breeze.</li> </ul>"},{"location":"#get-building-in-3-simple-steps","title":"Get Building in 3 Simple Steps","text":"<p>Ready to dive in? You can have your first agent running in less time than it takes to make a coffee.</p> 1. Install the Package <p>One simple command is all it takes to get the library into your environment.</p> Go to Installation \u2192 2. Write Your First Agent <p>Create a simple \"Echo Agent\" with just a few lines of Python code. No boilerplate, we promise.</p> Start the Quick Start \u2192 3. Explore the Guides <p>Learn how to build more complex agents, connect them to tools, and more.</p> Check out the Guides \u2192"},{"location":"#what-can-you-build","title":"What Can You Build?","text":"<p>The possibilities are endless, but here are a few ideas to get your brain spinning:</p> <ul> <li>A personal coding assistant that can write, review, and test your code.</li> <li>A team of research agents that collaborate to gather, synthesize, and report on any topic.</li> <li>An automation workflow that connects your favorite apps (like Slack, Notion, and Jira) together.</li> <li>A customer support agent that can intelligently answer questions and escalate issues.</li> </ul>"},{"location":"#join-the-community","title":"Join the Community","text":"<p>We're building this in the open, and we'd love for you to join us. Whether you're a seasoned AI engineer or just agent-curious, you're welcome here.</p> <ul> <li>GitHub Discussions: Ask questions, share your projects, and help shape the future of the protocol.</li> <li>Discord Server: Hop in to chat with the team and other developers in real-time.</li> </ul> <p>Let's build something awesome together!</p>"},{"location":"core-concepts/","title":"Core Concepts","text":"<p>Understanding a few core concepts will help you unlock the full power of <code>genai-agentos</code>.</p>"},{"location":"core-concepts/#agent","title":"Agent","text":"<p>An <code>Agent</code> is the fundamental building block. It's an autonomous entity that can perform tasks, communicate, and make decisions. In code, you create an agent by defining a class that inherits from our base <code>Agent</code> class. You give it a name, a description (its \"prompt\" or \"constitution\"), and logic for how it handles messages.</p>"},{"location":"core-concepts/#message","title":"Message","text":"<p>Agents communicate using <code>Message</code> objects. A message is a simple data structure that contains the content (text), the sender, and the recipient. Our protocol ensures these messages can be reliably sent between agents, whether they are running on the same machine or across the internet.</p>"},{"location":"core-concepts/#backend","title":"Backend","text":"<p>The <code>Backend</code> is the engine that powers the agents. It manages the agent lifecycle, message queuing, and state. When you use the <code>run()</code> function, you are starting a simple, local backend. For more complex applications, you can run a persistent backend server that manages multiple agents.</p>"},{"location":"core-concepts/#protocol-a2a","title":"Protocol (A2A)","text":"<p>The Agent-to-Agent (A2A) protocol is the set of rules that governs how agents communicate. It defines how messages are formatted, addressed, and routed. You don't usually need to interact with the protocol directly, but it's what enables the powerful multi-agent systems you can build with <code>genai-agentos</code>.</p>"},{"location":"installation/","title":"Installation","text":"<p>Welcome to <code>genai-agentos</code>! We're excited to have you here. Let's get the necessary tools installed so you can start building. </p> <p>The best way to install the <code>genai-agentos</code> package is through <code>pip</code>, Python's package installer.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>An OpenAI API Key (for the default examples)</li> </ul>"},{"location":"installation/#install-with-pip","title":"Install with Pip","text":"<p>We strongly recommend creating a virtual environment. This is a great habit to get into as a developer, as it keeps your project dependencies isolated and prevents conflicts.</p> <pre><code># First, create a new directory for your project and navigate into it\nmkdir my-first-agent\ncd my-first-agent\n\n# Next, create and activate a virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Now, install the core package using pip\npip install genai-agentos\n</code></pre> <p>And that's it! You now have the core genai-agentos library installed and are ready to go.</p>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>The agent protocol is designed to be model-agnostic. We include a few \"extra\" installation options for common Large Language Models (LLMs) to make your life easier.</p> <p>OpenAI To use OpenAI models like GPT-4, install the openai extra:</p> <pre><code>pip install \"genai-agentos[openai]\"\n\n</code></pre> <p>Now that you're all set up, let's move on to the Quick Start and build something!</p>"},{"location":"quick-start/","title":"Quick Start: Your First Agent in 5 Minutes","text":"<p>This guide will get you from zero to a running AI agent in just a few minutes. We'll create a simple \"Echo Agent\" that replies with whatever you send it. This is the \"Hello, World!\" of agent building.</p>"},{"location":"quick-start/#1-set-your-api-key","title":"1. Set Your API Key","text":"<p>Our agents need a model to \"think.\" For this example, we'll use OpenAI. Set your API key as an environment variable in your terminal.</p> <pre><code>export OPENAI_API_KEY='sk-...'\n</code></pre> <ol> <li>Create the Agent File Create a new file called echo_agent.py and add the following code. It's fully self-contained!</li> </ol> <pre><code>\n</code></pre> <ol> <li>Run the Agent Now, run your agent from the terminal using the python command:</li> </ol> <pre><code>genai ....\n</code></pre> <p>You'll see a prompt. Type a message and press Enter.</p> <pre><code>Starting EchoAgent... (type 'exit' to quit)\n&gt; Hello, world!\nReceived message: 'Hello, world!'\nEchoAgent: You said: Hello, world!\n&gt;\n</code></pre> <p>Congratulations!  You've just built and interacted with your first AI agent using genai-agentos. </p>"}]}